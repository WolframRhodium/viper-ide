# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2011-2020 ETH Zurich.

name: test


on:
  push: # run this workflow on every push
  pull_request: # run this workflow on every pull_request
  workflow_dispatch: # allow to manually trigger this workflow
    inputs:
      tag_name:
        description: 'Tag name for stable release.'
        required: true
      release_name:
        description: 'Release title for stable release.'
        required: true
  schedule:
    - cron: '0 7 * * *' # run every day at 07:00 UTC


jobs:
  build-and-test:
    # build-and-test is the base job on which all other jobs depend
    # we enforce here that the nightly build job only runs in the main repo:
    if: (github.event_name == 'schedule' && github.repository == 'viperproject/viper-ide') || (github.event_name != 'schedule')
    strategy:
      # tests should not be stopped when they fail on one of the OSes:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Viper-IDE
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: '11'
      - run: java --version

      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: client/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # npm ci fails to clone GitHub repos referenced in package.json with recent node versions
      # the following work around has been proposed here: https://github.com/actions/setup-node/issues/214#issuecomment-810829250
      - name: Reconfigure git to use HTTPS authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - run: npm ci --prefer-offline
        working-directory: server

      - run: npm ci --cache .npm --prefer-offline
        working-directory: client

      - name: Run tests (headless)
        uses: GabrielBB/xvfb-action@v1
        id: runTests
        with:
          run: npm test --full-trace
          working-directory: client
        env:
          VIPER_IDE_LOG_DIR: ${{ github.workspace }}/client/logs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Viper-IDE log files
        if: ${{ failure() || cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: TestLogs-${{ matrix.os }}
          path: client/logs

      - name: Clean 'out' folder (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        run: npm run clean
        working-directory: client

      # `npm run package` resp. `vsce` complains that it cannot find 
      # locate-java-home and vs-verification-toolbox dependencies (the two non-npm dependencies).
      # this seems related to https://github.com/npm/cli/issues/791
      # the current workaround is to `run npm install` first:
      - name: Run 'npm install' as a workaround to later being able to package Viper-IDE (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        run: npm install
        working-directory: client

      - name: List all files that will be packaged (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        run: npx vsce ls
        working-directory: client

      - name: Package Viper-IDE extension (ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        # note that baseContentUrl has to be manually provided as vsce does not know that it is run in the client subfolder:
        run: npm run package -- --baseContentUrl https://github.com/viperproject/viper-ide/raw/master/client --out viper-ide.vsix
        working-directory: client

      - name: Upload packaged Viper-IDE (ubuntu-only)
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v2
        with:
          name: viper-ide.vsix
          path: client/viper-ide.vsix


  create-stable-release:
    # this job creates a stable draft-release and adds viper-ide.vsix as a release asset
    if: github.event_name == 'workflow_dispatch'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # we have to checkout the repo to read client/package.json later on:
      - name: Checkout Viper-IDE
        uses: actions/checkout@v2

      - name: Download packaged Viper IDE
        uses: actions/download-artifact@v2
        with:
          name: viper-ide.vsix
          path: client

      - name: Create stable draft-release
        id: create_release
        uses: actions/create-release@v1
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          release_name: ${{ github.event.inputs.release_name }}
          draft: true
          prerelease: false

      - name: Upload packaged Viper IDE
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: client/viper-ide.vsix
          asset_name: viper-ide.vsix
          asset_content_type: application/octet-stream

      # compare version in client/package.json with last published version on
      # VS Marketplace and deploy this version if newer.
      # credits go to @fpoli!
      - name: Obtain version information
        run: |
          VSCE_OUTPUT="$(
            npx vsce show viper-admin.viper --json
          )"
          if [[ $(echo $VSCE_OUTPUT | grep --fixed-strings --line-regexp undefined) ]]; then
            LAST_PUBLISHED_VERSION="0"
          else
            LAST_PUBLISHED_VERSION="$(
              echo $VSCE_OUTPUT | jq '.versions[0].version' --raw-output
            )"
          fi
          CURRENT_VERSION="$(
            cat client/package.json | jq '.version' --raw-output
          )"
          echo "LAST_PUBLISHED_VERSION=$LAST_PUBLISHED_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Publish the extension to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v0
        if: env.CURRENT_VERSION != env.LAST_PUBLISHED_VERSION
        with:
          pat: ${{ secrets.VSCE_TOKEN }}
          registryUrl: https://marketplace.visualstudio.com
          extensionFile: client/viper-ide.vsix
          packagePath: ''

      - name: Publish the extension to Open VSX Registry
        uses: HaaLeo/publish-vscode-extension@v0
        if: env.CURRENT_VERSION != env.LAST_PUBLISHED_VERSION
        with:
          pat: ${{ secrets.OPEN_VSX_TOKEN }}
          registryUrl: https://open-vsx.org
          extensionFile: client/viper-ide.vsix
          packagePath: ''
